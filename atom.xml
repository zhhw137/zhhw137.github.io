<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zhhw的Blog</title>
  
  <subtitle>记录java学习成长</subtitle>
  <link href="https://zhhw137.github.io/atom.xml" rel="self"/>
  
  <link href="https://zhhw137.github.io/"/>
  <updated>2020-08-26T04:26:00.752Z</updated>
  <id>https://zhhw137.github.io/</id>
  
  <author>
    <name>zhhw</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>流水线</title>
    <link href="https://zhhw137.github.io/2020/08/26/%E6%B5%81%E6%B0%B4%E7%BA%BF/"/>
    <id>https://zhhw137.github.io/2020/08/26/%E6%B5%81%E6%B0%B4%E7%BA%BF/</id>
    <published>2020-08-25T16:00:00.000Z</published>
    <updated>2020-08-26T04:26:00.752Z</updated>
    
    <content type="html"><![CDATA[<h2 id="流水线"><a href="#流水线" class="headerlink" title="流水线"></a>流水线</h2><p>对，你没看错，这篇的主要内容是流水线，IT工人也是工人，流水线加快速度自然是一个更加方便资本主义压榨的好方法了。<img src="/images/%E6%90%9E%E7%AC%91%E7%8B%97%E5%A4%B4%E8%84%B8.jpg" alt="git"></p><a id="more"></a><p>上篇文章，说了一堆关于rancher和k8s的基本概念和知识，其实小编自己也没有弄懂。成本有限的情况下，蹭了一台别人的机器上的虚拟机(配置还是很高的,双核,64G,1T)尝试着搭建了下k8s，照着命令倒是把master和node搭建在这一台机器上成功了，但是rancher成功之后，因为不可抗力最后没有看到实际效果。暂时就放弃了<img src="/images/%E6%8D%82%E8%84%B8%E7%AC%91.jpg" alt="git"></p><p>言归正传。</p><p>所谓流水线，指的是rancher上的流水线，即自动从gitlab上读取代码，打包，构建镜像，部署、启动程序一气呵成的流水线。下面让我们来看下具体流程</p><p>1、harbor镜像仓库安装</p><p>rancher的资源镜像库中添加</p><p>2、流水线配置</p><p>rancher的可视化平台上，工具上进行流水线配置。这里会绑定代码库等配置</p><p>3、实际项目文件书写</p><p>上面俩步，公司的大佬完成后我因为权限不足，也就是结合着其他博客等知识大概看了看，没有实际上手经验就不多说了<img src="/images/%E8%AF%B4%E4%B8%8D%E5%87%BA%E8%AF%9D.jpg" alt="git"></p><p>但是，说道给项目编写配置文件触发流水线<img src="/images/%E4%B8%8D%E5%9B%B0%E4%BA%86.jpg" alt="git"></p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><h4 id="rancher-pipeline-yml"><a href="#rancher-pipeline-yml" class="headerlink" title=".rancher-pipeline.yml"></a>.rancher-pipeline.yml</h4><p>​    该配置文件即为流水线的主要配置文件，也是正常看到的流水线clone、build、publish、deploy四步的原因<img src="/images/%E6%B5%81%E6%B0%B4%E7%BA%BF/%E6%B5%81%E6%B0%B4%E7%BA%BF%E6%97%A5%E5%BF%97.png" alt="git"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">steps:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">runScriptConfig:</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">maven:3.6.0-jdk-8-alpine</span></span><br><span class="line">      <span class="attr">shellScript:</span> <span class="string">mvn</span> <span class="string">clean</span> <span class="string">package</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">push-image</span></span><br><span class="line">  <span class="attr">steps:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">publishImageConfig:</span></span><br><span class="line">      <span class="attr">dockerfilePath:</span> <span class="string">./Dockerfile</span></span><br><span class="line">      <span class="attr">buildContext:</span> <span class="string">.</span></span><br><span class="line">      <span class="attr">tag:</span> <span class="string">scc/hyperloop-baseapi:$&#123;CICD_EXECUTION_SEQUENCE&#125;</span></span><br><span class="line">      <span class="attr">pushRemote:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">registry:</span> <span class="string">registry.cn-hangzhou.aliyuncs.com</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">steps:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">applyYamlConfig:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">./deployment.yaml</span></span><br><span class="line"><span class="attr">timeout:</span> <span class="number">60</span></span><br></pre></td></tr></table></figure><ul><li>该配置文件一定要写在项目的根目录下</li><li>clone 根据上面配置的代码库和流水线配置直接去拉取代码，无须写</li><li>bulid mavn命令进行代码打包</li><li>publish  <ul><li>根据dockerfilepath中对应的dockerfile文件读取对应的docker命令发布镜像</li><li>tag本次镜像仓库的地址 scc/hyperloop-baseapi 这里应该为你的镜像仓库地址</li></ul></li><li>deploy  path对应的是部署镜像的文件地址</li></ul><h4 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM    xx&#x2F;system&#x2F;openjdk:8-jdk-alpine</span><br><span class="line">ADD        xx.jar  &#x2F;app.jar</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;java&quot;,&quot;-Djava.security.egd&#x3D;file:&#x2F;dev&#x2F;.&#x2F;urandom&quot;,&quot;-jar&quot;,&quot;&#x2F;app.jar&quot;]</span><br></pre></td></tr></table></figure><ul><li>FROM  指定基础镜像路径</li><li>ADD  生成的jar包名称和打包项目路径</li><li>ENTRYPOINT 运行项目 -D 是新增参数，参数的名字叫 java.security.egd ，参数的值叫 file:/dev/./urandom，是为了解决随机数生成的问题(看解释是因为jdk的一个bug导致,指定随机数生成可以优化性能，在一定程度上加快程序启动)<img src="/images/%E6%90%9E%E7%AC%91%E7%8B%97%E5%A4%B4%E8%84%B8.jpg" alt="git">)</li></ul><h4 id="deployment-yaml"><a href="#deployment-yaml" class="headerlink" title="deployment.yaml"></a>deployment.yaml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span>  <span class="comment"># 指定api版本，此值必须在kubectl api-versions中  </span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span>  <span class="comment"># 指定创建资源的角色/类型   </span></span><br><span class="line"><span class="attr">metadata:</span>  <span class="comment"># 资源的元数据/属性 </span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">demo</span>  <span class="comment"># 资源的名字，在同一个namespace中必须唯一</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span> <span class="comment"># 部署在哪个namespace中</span></span><br><span class="line">  <span class="attr">labels:</span>  <span class="comment"># 设定资源的标签</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">demo</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">stable</span></span><br><span class="line"><span class="attr">spec:</span> <span class="comment"># 资源规范字段</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span> <span class="comment"># 声明副本数目</span></span><br><span class="line">  <span class="attr">revisionHistoryLimit:</span> <span class="number">3</span> <span class="comment"># 保留历史版本</span></span><br><span class="line">  <span class="attr">selector:</span> <span class="comment"># 选择器</span></span><br><span class="line">    <span class="attr">matchLabels:</span> <span class="comment"># 匹配标签</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">demo</span></span><br><span class="line">      <span class="attr">version:</span> <span class="string">stable</span></span><br><span class="line">  <span class="attr">strategy:</span> <span class="comment"># 策略</span></span><br><span class="line">    <span class="attr">rollingUpdate:</span> <span class="comment"># 滚动更新</span></span><br><span class="line">      <span class="attr">maxSurge:</span> <span class="number">30</span><span class="string">%</span> <span class="comment"># 最大额外可以存在的副本数，可以为百分比，也可以为整数</span></span><br><span class="line">      <span class="attr">maxUnavailable:</span> <span class="number">30</span><span class="string">%</span> <span class="comment"># 示在更新过程中能够进入不可用状态的 Pod 的最大值，可以为百分比，也可以为整数</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">RollingUpdate</span> <span class="comment"># 滚动更新策略</span></span><br><span class="line">  <span class="attr">template:</span> <span class="comment"># 模版</span></span><br><span class="line">    <span class="attr">metadata:</span> <span class="comment"># 资源的元数据/属性 </span></span><br><span class="line">      <span class="attr">annotations:</span> <span class="comment"># 自定义注解列表</span></span><br><span class="line">        <span class="attr">sidecar.istio.io/inject:</span> <span class="string">&quot;false&quot;</span> <span class="comment"># 自定义注解名字</span></span><br><span class="line">      <span class="attr">labels:</span> <span class="comment"># 设定资源的标签</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">demo</span></span><br><span class="line">        <span class="attr">version:</span> <span class="string">stable</span></span><br><span class="line">    <span class="attr">spec:</span> <span class="comment"># 资源规范字段</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">demo</span> <span class="comment"># 容器的名字   </span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">demo:v1</span> <span class="comment"># 容器使用的镜像地址   </span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span> <span class="comment"># 每次Pod启动拉取镜像策略，三个选择 Always、Never、IfNotPresent</span></span><br><span class="line">                                      <span class="comment"># Always，每次都检查；Never，每次都不检查（不管本地是否有）；IfNotPresent，如果本地有就不检查，如果没有就拉取 </span></span><br><span class="line">        <span class="attr">resources:</span> <span class="comment"># 资源管理</span></span><br><span class="line">          <span class="attr">limits:</span> <span class="comment"># 最大使用</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">300m</span> <span class="comment"># CPU，1核心 = 1000m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">500Mi</span> <span class="comment"># 内存，1G = 1000Mi</span></span><br><span class="line">          <span class="attr">requests:</span>  <span class="comment"># 容器运行时，最低资源需求，也就是说最少需要多少资源容器才能正常运行</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">100m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">100Mi</span></span><br><span class="line">        <span class="attr">livenessProbe:</span> <span class="comment"># pod 内部健康检查的设置</span></span><br><span class="line">          <span class="attr">httpGet:</span> <span class="comment"># 通过httpget检查健康，返回200-399之间，则认为容器正常</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/healthCheck</span> <span class="comment"># URI地址</span></span><br><span class="line">            <span class="attr">port:</span> <span class="number">8080</span> <span class="comment"># 端口</span></span><br><span class="line">            <span class="attr">scheme:</span> <span class="string">HTTP</span> <span class="comment"># 协议</span></span><br><span class="line">            <span class="comment"># host: 127.0.0.1 # 主机地址</span></span><br><span class="line">          <span class="attr">initialDelaySeconds:</span> <span class="number">30</span> <span class="comment"># 表明第一次检测在容器启动后多长时间后开始</span></span><br><span class="line">          <span class="attr">timeoutSeconds:</span> <span class="number">5</span> <span class="comment"># 检测的超时时间</span></span><br><span class="line">          <span class="attr">periodSeconds:</span> <span class="number">30</span> <span class="comment"># 检查间隔时间</span></span><br><span class="line">          <span class="attr">successThreshold:</span> <span class="number">1</span> <span class="comment"># 成功门槛</span></span><br><span class="line">          <span class="attr">failureThreshold:</span> <span class="number">5</span> <span class="comment"># 失败门槛，连接失败5次，pod杀掉，重启一个新的pod</span></span><br><span class="line">        <span class="attr">readinessProbe:</span> <span class="comment"># Pod 准备服务健康检查设置</span></span><br><span class="line">          <span class="attr">httpGet:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/healthCheck</span></span><br><span class="line">            <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">            <span class="attr">scheme:</span> <span class="string">HTTP</span></span><br><span class="line">          <span class="attr">initialDelaySeconds:</span> <span class="number">30</span></span><br><span class="line">          <span class="attr">timeoutSeconds:</span> <span class="number">5</span></span><br><span class="line">          <span class="attr">periodSeconds:</span> <span class="number">10</span></span><br><span class="line">          <span class="attr">successThreshold:</span> <span class="number">1</span></span><br><span class="line">          <span class="attr">failureThreshold:</span> <span class="number">5</span></span><br><span class="line">        <span class="comment">#也可以用这种方法   </span></span><br><span class="line">        <span class="comment">#exec: 执行命令的方法进行监测，如果其退出码不为0，则认为容器正常   </span></span><br><span class="line">        <span class="comment">#  command:   </span></span><br><span class="line">        <span class="comment">#    - cat   </span></span><br><span class="line">        <span class="comment">#    - /tmp/health   </span></span><br><span class="line">        <span class="comment">#也可以用这种方法   </span></span><br><span class="line">        <span class="comment">#tcpSocket: # 通过tcpSocket检查健康  </span></span><br><span class="line">        <span class="comment">#  port: number </span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span> <span class="comment"># 名称</span></span><br><span class="line">            <span class="attr">containerPort:</span> <span class="number">8080</span> <span class="comment"># 容器开发对外的端口 </span></span><br><span class="line">            <span class="attr">protocol:</span> <span class="string">TCP</span> <span class="comment"># 协议</span></span><br><span class="line">      <span class="attr">imagePullSecrets:</span> <span class="comment"># 镜像仓库拉取密钥</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">harbor-certification</span></span><br><span class="line">      <span class="attr">affinity:</span> <span class="comment"># 亲和性调试</span></span><br><span class="line">        <span class="attr">nodeAffinity:</span> <span class="comment"># 节点亲和力</span></span><br><span class="line">          <span class="attr">requiredDuringSchedulingIgnoredDuringExecution:</span> <span class="comment"># pod 必须部署到满足条件的节点上</span></span><br><span class="line">            <span class="attr">nodeSelectorTerms:</span> <span class="comment"># 节点满足任何一个条件就可以</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">matchExpressions:</span> <span class="comment"># 有多个选项，则只有同时满足这些逻辑选项的节点才能运行 pod</span></span><br><span class="line">              <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">beta.kubernetes.io/arch</span></span><br><span class="line">                <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">                <span class="attr">values:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">amd64</span></span><br></pre></td></tr></table></figure><p>参考链接</p><ul><li>[k8s官方英文] (<a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment/%EF%BC%89">https://kubernetes.io/docs/concepts/workloads/controllers/deployment/）</a></li><li>[中文介绍] (<a href="https://feisky.gitbooks.io/kubernetes/content/concepts/deployment.html%EF%BC%89">https://feisky.gitbooks.io/kubernetes/content/concepts/deployment.html）</a></li><li>[博客] (<a href="https://draveness.me/kubernetes-deployment/%EF%BC%89">https://draveness.me/kubernetes-deployment/）</a></li></ul><p>以上就是我目前对流水线的初步认识了，后续了解加深会再补充一篇文章。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;流水线&quot;&gt;&lt;a href=&quot;#流水线&quot; class=&quot;headerlink&quot; title=&quot;流水线&quot;&gt;&lt;/a&gt;流水线&lt;/h2&gt;&lt;p&gt;对，你没看错，这篇的主要内容是流水线，IT工人也是工人，流水线加快速度自然是一个更加方便资本主义压榨的好方法了。&lt;img src=&quot;/images/%E6%90%9E%E7%AC%91%E7%8B%97%E5%A4%B4%E8%84%B8.jpg&quot; alt=&quot;git&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="rancher" scheme="https://zhhw137.github.io/tags/rancher/"/>
    
    <category term="k8s" scheme="https://zhhw137.github.io/tags/k8s/"/>
    
    <category term="流水线" scheme="https://zhhw137.github.io/tags/%E6%B5%81%E6%B0%B4%E7%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title>Rancher+k8s初识</title>
    <link href="https://zhhw137.github.io/2020/08/25/Rancher+k8s%E5%88%9D%E5%A7%8B/"/>
    <id>https://zhhw137.github.io/2020/08/25/Rancher+k8s%E5%88%9D%E5%A7%8B/</id>
    <published>2020-08-24T16:00:00.000Z</published>
    <updated>2020-08-26T03:20:50.582Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Rancher-k8s初识"><a href="#Rancher-k8s初识" class="headerlink" title="Rancher+k8s初识"></a>Rancher+k8s初识</h2><p>8月13号，Docker公司的最新服务条款中明确指出：禁止美国“实体清单”上的实体使用(其中包括华为、奇虎360、科大讯飞等中国IT公司)。让这一时下最流行的容器管理技术，又实实在在的火了一波。所以，今天让我们来看看它的替代品之二：rancher+k8s。(主要笔者还不会docker)<img src="/images/%E6%8D%82%E8%84%B8%E7%AC%91.jpg" alt="git"></p><a id="more"></a><h3 id="存在即合理"><a href="#存在即合理" class="headerlink" title="存在即合理"></a>存在即合理</h3><p>1、容器技术的兴起：虚拟机是在容器技术大行其道之前，开发和运维成员的主流技术。但是其高昂的移植成本、启动慢和占用空间大等问题，为以docker为代表的容器管理技术的兴起埋下伏笔。所谓容器化，就是放弃虚拟机虚拟整个操作系统，而是只虚拟一个小规模的环境即可。</p><p>2、微服务：为了满足业务发展而导致的用户量增多，系统数量增多和互相之间调用的依赖关系的赋值，确保系统的高可用、高并发要求，系统的架构慢慢从单机时代迁移到服务SOA时代。应运而生的就是大量的系统和容器使用。于是，一个管理所有容器的技术架构或者说工具迫在眉睫。而k8s的问世，就是提出的一套全新的基于容器技术的分布式架构领先方案。</p><h3 id="k8s"><a href="#k8s" class="headerlink" title="k8s"></a>k8s</h3><p>k8s全称kubernetes，为了应对微服务而兴起的分布式架构，既然是分布式，则必然有着集群的部署条件。</p><p>k8s集群由master节点和Node节点组成，</p><p><strong>Master节点</strong></p><p>master节点是集群的控制节点，管理和控制整个集群，它负责具体的执行过程，其上运行着：</p><ol><li>Kubernetes Controller Manager（kube-controller-manager）：k8s中所有资源对象的自动化控制中心，维护管理集群的状态，比如故障检测，自动扩展，滚动更新等。</li><li>Kubernetes Scheduler（kube-scheduler）： 负责资源调度，按照预定的调度策略将Pod调度到相应的机器上。</li><li>etcd：保存整个集群的状态。</li></ol><p><strong>Node节点</strong></p><p>除了master以外的节点被称为Node或者Worker节点，可以在master中使用命令 <code>kubectl get nodes</code>查看集群中的node节点。每个Node都会被Master分配一些工作负载（Docker容器），当某个Node宕机时，该节点上的工作负载就会被Master自动转移到其它节点上。在Node上主要运行着：</p><ol><li>kubelet：负责Pod对应的容器的创建、启停等任务，同时与Master密切协作，实现集群管理的基本功能</li><li>kube-proxy：实现service的通信与负载均衡</li><li>docker（Docker Engine）：Docker引擎，负责本机的容器创建和管理</li></ol><h3 id="rancher"><a href="#rancher" class="headerlink" title="rancher"></a>rancher</h3><p>技术领域，从来不会形成一家独大的情况，一项技术总会有其优缺点，也总会出现某些地方更具有优势的其他技术进行替代。所以早期的rancher的V1版本作为开源的企业级容器管理工具，其上有多种容器编排模式，例如cattle ,swarm,kubernetes。但随着，k8s势不可挡的逐渐成为主流，rancher应运而生的v2版本，则只保留了k8s的部分。</p><p>rancher，本质上可以看成是k8s更上层的管理框架，除了更加友好的界面和操作，同时，也在k8s的基础上，扩展了一些其不具有的功能如权限管理，日志收集。(详细可以看[知乎]（<a href="https://www.zhihu.com/question/309076492/answer/1150097420">https://www.zhihu.com/question/309076492/answer/1150097420</a>))</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Rancher-k8s初识&quot;&gt;&lt;a href=&quot;#Rancher-k8s初识&quot; class=&quot;headerlink&quot; title=&quot;Rancher+k8s初识&quot;&gt;&lt;/a&gt;Rancher+k8s初识&lt;/h2&gt;&lt;p&gt;8月13号，Docker公司的最新服务条款中明确指出：禁止美国“实体清单”上的实体使用(其中包括华为、奇虎360、科大讯飞等中国IT公司)。让这一时下最流行的容器管理技术，又实实在在的火了一波。所以，今天让我们来看看它的替代品之二：rancher+k8s。(主要笔者还不会docker)&lt;img src=&quot;/images/%E6%8D%82%E8%84%B8%E7%AC%91.jpg&quot; alt=&quot;git&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="rancher" scheme="https://zhhw137.github.io/tags/rancher/"/>
    
    <category term="k8s" scheme="https://zhhw137.github.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://zhhw137.github.io/2020/08/23/hello-world/"/>
    <id>https://zhhw137.github.io/2020/08/23/hello-world/</id>
    <published>2020-08-23T11:09:39.509Z</published>
    <updated>2020-08-22T05:42:24.277Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>git常用指令总结</title>
    <link href="https://zhhw137.github.io/2020/08/23/git%E6%8C%87%E4%BB%A4/"/>
    <id>https://zhhw137.github.io/2020/08/23/git%E6%8C%87%E4%BB%A4/</id>
    <published>2020-08-23T11:09:39.507Z</published>
    <updated>2020-08-23T08:47:12.184Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/git.png" alt="git"></p><p>在这里记录一些常用的<code>git</code>指令，以及使用时碰到的一些问题及相应的解决办法。</p><a id="more"></a><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git init [local repository]</span><br></pre></td></tr></table></figure><h2 id="克隆到本地"><a href="#克隆到本地" class="headerlink" title="克隆到本地"></a>克隆到本地</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone &lt;url&gt;</span><br></pre></td></tr></table></figure><h2 id="添加变化至暂存区-index"><a href="#添加变化至暂存区-index" class="headerlink" title="添加变化至暂存区(index)"></a>添加变化至暂存区(index)</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;filename&gt;</span><br><span class="line">git add *</span><br><span class="line">git commit -m &quot;&lt;commit message&gt;&quot;</span><br></pre></td></tr></table></figure><h2 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 推送到指定的远程分支</span></span><br><span class="line">git push oringin &lt;master&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 绑定远程分支并推送</span></span><br><span class="line">git romete add origin &lt;master&gt;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h2 id="分支-branch-相关"><a href="#分支-branch-相关" class="headerlink" title="分支(branch)相关"></a>分支(branch)相关</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">git branch # 查看本地分支</span><br><span class="line">git branch -r # 查看远程分支</span><br><span class="line">git branch -a # 查看所有分支</span><br><span class="line"></span><br><span class="line">git checkout -b &lt;dev&gt; # 创建本地分支</span><br><span class="line">git checkout &lt;dev&gt; # 切换到本地分支（没有会根据远程分支创建本地分支）</span><br><span class="line"></span><br><span class="line">git branch -d &lt;dev&gt; # 删除本地分支</span><br><span class="line">git push origin -d &lt;remote_dev&gt; # 删除远程分支</span><br><span class="line"></span><br><span class="line">git push origin &lt;dev&gt; # 推送到远程分支，没有会自动创建</span><br><span class="line"></span><br><span class="line">git checkout [branch name] # 切换分支</span><br></pre></td></tr></table></figure><h2 id="拉取"><a href="#拉取" class="headerlink" title="拉取"></a>拉取</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br><span class="line">git fetch [origin]</span><br></pre></td></tr></table></figure><h2 id="缓存-stash-相关"><a href="#缓存-stash-相关" class="headerlink" title="缓存(stash)相关"></a>缓存(stash)相关</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git stash list</span><br><span class="line">git stash save &#x27;&lt;stash name&gt;&#x27;</span><br><span class="line">git stash show</span><br><span class="line">git stash show -p</span><br><span class="line">git stash apply [@&#123;num&#125;]</span><br><span class="line">git stash pop [@&#123;num&#125;]</span><br><span class="line">git stash drop</span><br><span class="line">git stash clear</span><br></pre></td></tr></table></figure><h2 id="状态-status"><a href="#状态-status" class="headerlink" title="状态(status)"></a>状态(status)</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/git.png&quot; alt=&quot;git&quot;&gt;&lt;/p&gt;
&lt;p&gt;在这里记录一些常用的&lt;code&gt;git&lt;/code&gt;指令，以及使用时碰到的一些问题及相应的解决办法。&lt;/p&gt;</summary>
    
    
    
    <category term="guide" scheme="https://zhhw137.github.io/categories/guide/"/>
    
    <category term="git" scheme="https://zhhw137.github.io/categories/guide/git/"/>
    
    
    <category term="git" scheme="https://zhhw137.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>模板使用说明</title>
    <link href="https://zhhw137.github.io/2020/08/22/mysql%E7%AF%87-%E5%88%9D%E8%AF%86/"/>
    <id>https://zhhw137.github.io/2020/08/22/mysql%E7%AF%87-%E5%88%9D%E8%AF%86/</id>
    <published>2020-08-22T05:30:00.000Z</published>
    <updated>2020-09-07T09:48:38.936Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>Mysql的深入点了解，主要建立在《MySQL技术内幕：Innodb存储引擎（第二版）》的基础上，记录的知识点和一些自己验证后发现的自己的个人感觉书里表述不清的地方，当然，笔者是java后端的开发，一些比较偏DBA的地方有进行略过。</p><a id="more"></a><h3 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h3><p>数据库：物理操作系统文件或其他形式文件类型的集合(数据的仓库)</p><p>实例：Mysql数据库由后台线程以及一个共享内存区组成(进程，也是我们实际以为的数据库)</p><p>存储引擎 到表级别  show ENGINEs 查看    InnoDB，MyISAM       其他</p><h3 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h3><p>innoDB 缓冲池  大小默认1G 个数默认1个（可扩展增加性能）</p><p>内存缓冲池管理技术 ： LRU list: lru和unzip_LRU   Free List     Flush list</p><p>​            脏页刷新回磁盘 CheckPoint  ( 类比redis缓存失效)   </p><ul><li>master thread 定时刷新  </li><li>flush_lru_list  不能保证100个空闲页供使用     LRU列表尾端淘汰的页</li><li>Async/Sync Flush Checkpoint  重做日志文件不可用   flush list 腾出空间来</li><li>Dirty Page too much 为了保持缓冲池中有足够的页</li></ul><p>InnoDB 关键特性</p><ul><li>插入缓冲</li><li>俩次写（doublewrite）<ul><li>partial page write ： InnoDB 的Page Size一般是16KB，其数据校验也是针对这16KB来计算的，将数据写入到磁盘是以Page为单位进行操作的。而计算机硬件和操作系统，在极端情况下（比如断电）往往并不能保证这一操作的原子性，16K的数据，写入4K 时，发生了系统断电/os crash ，只有一部分写是成功的，这种情况下就是 partial page write 问题。<br>很多DBA 会想到系统恢复后，MySQL 可以根据redolog 进行恢复，而mysql在恢复的过程中是检查page的checksum，checksum就是pgae的最后事务号，发生partial page write 问题时，page已经损坏，找不到该page中的事务号，就无法恢复。</li><li>为了解决 partial page write 问题 ，当mysql将脏数据flush到data file的时候, 先使用memcopy 将脏数据复制到内存中的double write buffer ，之后通过double write buffer再分2次，每次写入1MB到共享表空间，然后马上调用fsync函数，同步到磁盘上，避免缓冲带来的问题，在这个过程中，doublewrite是顺序写，开销并不大，在完成doublewrite写入后，在将double write buffer写入各表空间文件，这时是离散写入。<br>如果发生了极端情况（断电），InnoDB再次启动后，发现了一个Page数据已经损坏，那么此时就可以从doublewrite buffer中进行数据恢复了。</li></ul></li><li>自适应哈希索引</li><li>异步IO</li><li>刷新邻接页</li></ul><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><ul><li>参数文件   正常mysql的参数配置文件(可以没有，mysql有自己默认的一套)</li><li>socket文件    UNIX域套接字方式连接时候的文件</li><li>pid文件   mysql实例的进程id文件</li><li>mysql表结构文件   用来存放mysql表结构定义文件</li><li>存储引擎文件<ul><li>表空间文件</li><li>重做日志文件（redo log）</li></ul></li><li>日志文件<ul><li>错误日志文件   记录错误信息和警告</li><li>二进制文件  记录对数据库有更改的无所谓是否成功的操作(即不包括show和select)，主要用于恢复、复制、审计作用（通过信息，判断是否有注入攻击）</li><li>慢查询日志文件   根据参数long_query_time默认10s  记录执行慢的查询语句，即一个语句如果执行之间超过这个参数记录下来。  log_queries_not_using_indexes 记录没有使用索引的语句 。 slow_query_type  表示启用慢查询日志的方式：0 不记录，1记录超时的，2记录逻辑io次数超的，3都记录</li><li>查询日志文件 记录所有执行的sql语句，包括未能执行的。具体其他和慢查询一样</li></ul></li></ul><h3 id="表"><a href="#表" class="headerlink" title="表"></a>表</h3><ul><li><p>索引组织表：根据主键顺序组织存放的表(因此数据即索引，索引即数据)</p></li><li><p>InnoDB逻辑存储结构</p><ul><li><p>表空间</p></li><li><p>段     索引段(非叶子节点)、数据段（叶子节点）、回滚段</p></li><li><p>区   由连续页组成，大小一定为1MB</p></li><li><p>页  管理最小单元    数据页、undo页、系统页、事务数据页、插入缓冲位图也、插入缓冲空闲列表页、未压缩的二进制大对象页、压缩的二进制大对象页</p></li><li><p>行  存储格式:redundant(不推荐使用了)  compact(存储溢出数据的前768字节)/dynamic(8以后的默认格式，存储溢出数据的前20个字节)  针对text，blob大类型数据一旦溢出就拆分多个页存储     compressed 压缩格式，对数据索引都压缩其物理存储层面，读取到内存中要转换，影响性能  </p><p>多字节字符（utf-8，gbk）情况下 char和varchar没有区别，会自己填充</p></li></ul></li><li><p>页详细结构    </p><ul><li>File Header 文件头 38字节</li><li>Page Header 页头 56字节</li><li>Infimun和Supremum Records 限定边界</li><li>User Records 行记录</li><li>Free Space 空闲空间</li><li>Page Directory 页目录  B+树索引只能找到对应的页位置，时间数据是页加载到内存中，再进行二叉查找</li><li>File Trailer  文件结尾信息  8字节</li></ul></li><li><p>约束机制保证数据完整性</p><p>约束方式</p><ul><li>Primary Key 主键约束</li><li>Unique key 唯一索引约束</li><li>Foreign key 外键约束</li><li>Default 默认值</li><li>NOT NULL 不为空</li></ul><p>添加方式</p><ul><li>表建立时进行约束定义</li><li>利用Alter Table 命令进行创建</li><li>Unique Key 可以通过 create unique index建立</li><li>enum（男，女） set(1,2,’1,2’)建立约束</li></ul><p>约束和索引的区别：约束是逻辑概念，用来保证数据完整性，索引是物理和逻辑概念是一个数据结构，也代表着物理存储方式 详细解释 ：<a href="https://www.cnblogs.com/zjfjava/p/6922494.html">博客</a></p><p>不符合约束条件的错误数据：mysql底层转换成正确数据，发出警告（可通过sql_mode参数进行提示调整和报错）</p></li><li><p>触发器</p><ul><li><p>一个表最多建6个触发器：(update delete insert) * (before after)</p><p>基本语法 create trigger name  before|after   update|insert|delete   on  table  for each row (rtigger_stmt   此处为按照语法写的处理逻辑)</p></li></ul></li><li><p>外键约束</p><ul><li>MyISAM 不支持外键，其只是一种类似的注释作用</li><li>alter table stumarks add foreign key (stuno) references stuinfo(id) on delete set null on update cascade;   通过on delete和on update定义父表执行该操作时，子表的处理逻辑。<ul><li>cascade 同步</li><li>set null 子表中的数据更新为null 子表允许的情况下</li><li>no action 抛出错误不允许操作</li><li>restrict  抛出错误不允许操作，也是不指定外键类型的时候的默认值</li></ul></li></ul></li><li><p>视图</p><ul><li>由sql查询语句定义的虚表，没有实际物理存储</li><li>语法  create( or replace)  View name (column_list) as (select_stmt sql查询语句)   with  cascaded|local check option       cascaded 满足所有相关视图和表的条件，local 满足自身条件<ul><li>delete 操作，只能操作视图中存在的数据，有无 with check option相同</li><li>update 有时，必须update之后的数据符合视图条件</li><li>insert 有符合视图条件</li></ul></li></ul></li><li><p>物化视图（oralce自带，mysql通过触发器实现）</p><p>​    该视图转成真的基表实际存在的实表，加快在复杂sql语句生成的视图是查询效率慢的问题。</p><p>​    查询重写：查询基表时判断是否能够从其对应的物化视图中读取数据，可以就直接从视图中读取</p><ul><li>俩种创建方式<ul><li>build immediate 创建物化视图的时候就进行数据的生成</li><li>build deferred 创建视图时候不生成数据，后期再说</li></ul></li><li>刷新模式<ul><li>on demand 用户根据需要的时候再刷新数据</li><li>on commit 基本DML操作提交后直接刷新数据</li></ul></li><li>刷新方式<ul><li>fast 增量刷新</li><li>complete 全量刷新</li><li>force 数据库判断用fase还是complete</li><li>never 物化视图不进行刷新</li></ul></li></ul></li><li><p>分区表(分区字段一定要是主键或者是联合主键中的一个)</p><p>mysql只支持分平分和局部分区索引，即一个分区既存放了数据又存放了索引。而全局分区是所有数据索引单独存放爱一个对象中，只有数据存放在各个分区中</p><ul><li>RANGE分区 分区值连续,但是也需要指定一个大于或者小于的范围数据在哪个分区，多用来做时间的分隔，如按年分区，一年一区，想查某一年数据则只会查一个分区，想删除某一年数据直接删除分区  alter table 表名 drop partoion 分区名</li><li>LIST分区  分区离散 指定固定的值分布在哪个分区</li><li>HASH分区  通过自定的hash函数，将数据分布在哪个分区，在给定的数不是离散的情况下，可以较好的做到均匀分布 还有一种 LINEAR HASH 分区 <strong><em>优点</em></strong>：增加、删除、合并和拆分分区更快捷适合处理含有大量数据的表。**<em>缺点**</em>：相比较于hash分区，分布可能不太均匀</li><li>KEY分区 通过mysql自带的哈希函数进行分区  LINEAR就是其中一种</li><li>COLUMNS 分区   可以使用<strong>任一列作为分区，而不是像之前四种只能用整型(key支持使用除了text和blob之外的类型)，可以使用多个列进行分区</strong>，具有RANGE和LIST有RANGE COLUMNS和LIST COLUMNS俩种</li><li>子分区 在分区的基础上再进行分区，也就是复合分区即range和list上面进行hash和key分区</li></ul><p>对null值的处理，mysql会把null视为比任何值都小的值，所以range放在最左边分区，list需要显示指定null分区，hash和key会将其计算为0</p></li></ul><h3 id="索引与算法"><a href="#索引与算法" class="headerlink" title="索引与算法"></a>索引与算法</h3><h4 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h4><ul><li>普通索引：create index index_name on tab_name (col_name); 仅加速查询</li><li>唯一索引: create unique index index_name on tab_name (col_name); 加速查询+列值唯一，但值允许为null</li><li>主键索引: primary key  加速查询+列值唯一+表中只能有一个，且值不能为null</li><li>联合索引 create [unique] index index_name on tbl_name (col_name,col_name)  多列值组成一个索引，专门用于组合搜索，效率大于索引合并（对多个索引分别按照条件扫描，将结果进行合并)。最左匹配原则，且对第二个键进行了排序。**(a,b,c)给a,b,c三列建联合索引则a,b同时使用时c有进行排序，(a,b)给a,b建立的索引有给b建立索引**<ul><li>select .. from tbl where a=xxx order by b   和    where a=xxx and b=xx order by c   (a,b,c) 可以使用到索引</li><li>select … from tbl where a=xxx  order by c  (a,b,c)不使用索引 (a,c)使用索引</li></ul></li><li>全文索引：对文本内容进行分词，进行搜索</li><li>覆盖索引: (或称索引覆盖)应该算一种辅助索引命中场景，即从辅助索引中就可以得到查询的记录,而不需要根据存储的信息查找聚集索引中的记录。(其叶子节点存着数据primary key1 和primary key2,key1,key2,执行类似select primary key1,key2 from tbl where key1=xx)。另外<strong>执行统计</strong>的时候，因为辅助索引数量远小于聚集索引,选择辅助索引可以减少IO操作。</li></ul><h4 id="B-树索引"><a href="#B-树索引" class="headerlink" title="B+树索引"></a>B+树索引</h4><ul><li><p>B+树是平衡查找树但不是二叉树 B 指代的是balance 根据键值对快速查找到数据所在的页，再将页读取到内存中进行 <strong>二分查找</strong>  (详情见数据结构篇)   。<strong>支持like ‘xxx%’这种索引方式</strong></p><ul><li>聚集索引  按照每张表的主键构造的一棵B+树,每个表唯一,叶子节点中存放的即为整张表的行记录数据，即数据页，每个数据页通过一个双向链表来进行链接,页中的数据也通过双向链表链接。因为双向链表的数据顺序性，适合范围查询和排序查找。<ul><li>聚集索引是逻辑上连续而物理存储上并不一定连续(符合链表的存储结构且消耗相对小)</li></ul></li><li>辅助索引(也称为非聚集索引)   叶子节点并不包含所有的行记录数据。叶子节点除了包含键值对以外，还包括一个书签(bookmark)，用来告诉innodb在哪里可以找到索引对应的数据记录(其就是对应行记录的聚集索引键)。辅助索引指向的是最高的那层树即辅助索引高度3 聚集索引高度3 查找数据要io访问6次</li></ul></li><li><p>索引管理</p><ul><li><p>增加 create [unique] index index_name [index_type] on tbl_name (index_col_name)   删除 drop index index_name on tbl_name</p></li><li><p>show index from tbl_name 展示索引的具体属性</p><ul><li>table 表名</li><li>non_unique  0代表是唯一的索引，1代表非唯一索引</li><li>seq_in_index 该列在索引中的位置，组合索引因为有最左匹配原则</li><li>collation 列以什么方式存储再索引中，A或null  B+树索引是排序的所以是A，hash索引则是null</li><li>Cardinality  索引中唯一值的数目的估计值，（3行记录，则没有重复显示3行,有一行重复显示2行,尽可能与行记录数一值,该值<strong>不是实时更新</strong> 可以通过<strong>analyze table company</strong>进行强制更新），非常小，则应该考虑删除索引</li><li>sub_part  是否是列的部分被索引，显示100则为前100字符进行索引</li><li>NULl 代表索引中是否允许含有null值</li></ul></li><li><p>索引创建机制    </p><ul><li><p>针对辅助索引：Fast Index Creation 快速索引创建FIC，给表增加S锁，表只读</p></li><li><p>针对主键索引：</p><ul><li>创建一张临时表(和原表一样的结构),</li><li>导入原表数据</li><li>删除原表</li><li>将临时表命名为原来的表</li></ul></li><li><p>Online Schema change</p></li><li><p>Online DDL   在线数据定义,是将DML操作日志写入缓存中,索引创建完毕再执行达到一致性。缓存大小默认128MB由innodb_online_alter_log_max_size控制。</p><p>  语法，在正常语句(alter table tbl_name add index index_name (col_name))后面+（,ALGORITHM=DEFAULT|INPLACE|COPY）(,LOCK=DEFAULT|NONE|SHARED|EXCLUSIVE)</p><ul><li>ALGORITHM 指定创建删除索引的算法 copy创建临时表形式，inplace不创建临时表,根据参数old_alter_table判断OFF(默认)inplace       on则为 copy</li><li>lock则是加锁情况(<strong><em>其他语句也可以用</em></strong>)   none,不加锁  share 加S锁只读    exclusive x锁排他,阻塞所有线程     default从none开始判读是否可用直到exclusive</li></ul></li></ul></li><li><p>Cardinality  索引中不重复记录数量的预估值。cardinality/n_rows_in_table 应该尽可能接近1。越接近1代表着索引是高选择性的，即这列的每个值越不相同。</p><ul><li>更新策略：采样方法  cardinality=(8个叶子节点记录数)*B+树索引叶子节点数量/8  因此每次的值可能不同,且值并不准确。innodb_stats_method判断如何对待索引中出现的null值记录,<ul><li>nulls_equal    null视为同一条记录即100个null也是一条</li><li>nulls_unequal  null视为不同记录100个也是100条</li><li>nulls_ignored  null不视为一条记录</li></ul></li><li>更新节点：1、表中1/16的数据已发生过变化；2、stat_modified_counter&gt;2000 000 000 inndb存储引擎内部有这么个计数器，用来记录发生变化的次数</li></ul></li></ul></li><li><p>索引的特殊场景</p><ul><li>优化器不使用索引   范围查找数据(就算辅助索引查到了之后是离散的数据，需要主键索引再差消耗io更大。而主键索引是顺序读的远快于离散读)且需要的是整行数据(辅助索引只存了主键), 可使用 force index 强制使用某个索引</li><li>Multi-Range Read优化     MRR优化目的是为了减少磁盘的随机访问，将它转化为较为顺序的数据访问。就是将通过辅助索引查询到的结果，按照主键进行排序，在按照排序顺序进行书签查找，这可以减少缓冲池中页被替换的次数以及批量处理对键值的查询操作。(处理键值对的时候会进行拆分，这样可以在拆分过程中,直接过滤一些不符合查询条件的数据 select * from t where a&gt;1000 and a&lt;2000 and b=100,可以在取出来符合a的范围数据后，通过b进行过滤，性能巨大提升)<ul><li>mrr 表示是否启用mrr优化  on/off   set @@optimizer_switch=’mrr=on’</li><li>mrr_cost_based 表示是否通过cost based 方式选择启动mrr，就是说是否基于mrr的成本考虑mrr是否值得  set @@optimizer_switch=’mrr_cost_based=on’</li><li>read_rnd_buffer_size 控制键值的缓冲区大小 默认256K</li></ul></li><li>Index Condition Pushdown   ICP  mysql取出索引的同时，判断是否进行where条件的过滤，也就是将where的部分过滤操作放到存储引擎层。在某些查询下，可以大大减少上层sql层对记录的索取，从而提高数据库整体性能。（类似 select * from tbl where a=’1’  and b like ‘%xx’ 按照a索引取的数据，通过b先过滤再取出）</li></ul></li></ul><h4 id="全文索引-Full-Text-Search"><a href="#全文索引-Full-Text-Search" class="headerlink" title="全文索引(Full-Text Search)"></a>全文索引(Full-Text Search)</h4><ul><li><p>倒排索引：一种索引结构，在辅助表中存储了单词与单词自身在一个或多个文档中所在位置之间的映射</p><ul><li>inverted file index  表现形式 【单词，单词所在文档id】  （some,2） some这个单词所在记录id为2</li><li>full inverted index 表现形式 【单词，（单词所在文档id，在具体文档中的位置）】（some,(2:3,6)）some这个单词所在记录id为2 ，在单词中3和6都出现了</li></ul></li><li><p>全文索引的构成</p><ul><li>Auxiliary Table 持久的辅助表存放于磁盘上</li><li>FTS Index Cache 全文检索索引缓存，红黑树结构，根据（word，list）（上面的一个2:3(documentid,position)即为list中的一个）排序</li><li>全文检索查询时才将缓存写入辅助表(类似于插入缓存的机制比如缓存满了立即同步到辅助表等)</li><li>FTS Document ID 。innodb中为了有一列与word进行映射支持全文检索，定义了一列FTS_DOC_ID 其类型必须是BIGINT UNSIGNED NOT NULL并且存储引擎会在其上加上名为FTS_DOC_ID_INDEX的Unique Index.可以自己添加也可以由存储引擎加</li><li>删除操作中,辅助表中被删除的记录，会记录其FTS Document ID,并将其保存在delete auxiliaty table中，只能用户手工将记录彻底删除，optimize table</li><li>stopword list 记录word不需要进行索引分词操作的单词，例如 the。可用户自己维护</li><li>全文检索限制：<ul><li>每张表只能有一个全文检索的索引</li><li>由多列组合而成的全文检索的索引必须使用相同的字符集和排序规则</li><li>不支持没有单词界定符的语言，如：中日韩</li></ul></li><li>全文索引具体使用语法：感觉限制了中文，这种全文检索应该被es代替了，不用过多关注</li></ul></li></ul><h4 id="哈希索引"><a href="#哈希索引" class="headerlink" title="哈希索引"></a>哈希索引</h4><p>  innodb不支持人为设置hash索引，其具有自适应哈希索引,innodb会监控对表上二级索引的查找，如果发现某二级索引被频繁访问(最近连续被访问三次的数据),二级索引称为热数据，建立哈希索引。且innodb的哈希索引只支持where a=’xx’这种情况</p><h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><p>锁是数据库系统区别于文件系统的一个关键特性。锁机制用于管理对共享资源的并发访（）。innodb支持行锁级</p><ul><li><p>latch  闩锁，轻量级,对象是线程，用于保护内存数据结构，存在于每个数据结构的对象中，持续时间为临界资源，用来保证并发线程操作临界资源的正确性，并且通常没有死锁检测的机制，仅通过应用程序加锁的顺序保证无死锁的情况，要求其锁定时间必须非常短，时间长则应用性能非常差。其有俩种分类</p><ul><li>mutex  互斥量(互斥锁)</li><li>rwlock 读写锁</li></ul></li><li><p>lock  对象是事务，用来保护数据库内容，如表、页、行，持续在整个事务过程中，具有waits-for gtaph、time out等机制进行死锁检测与处理，存在于lock manager的哈希表中</p><ul><li>行锁</li><li>表锁</li><li>意向锁（Intention lock）</li></ul></li></ul><h4 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h4><p>一个事务已经获得了行r的共享锁，允许其他事务获得该行的s锁,(锁兼容) 不允许其他事务获得排他锁，只能等上面的共享锁和排他锁都释放了(锁不兼容)</p><ul><li>共享锁 (S Lock) 允许事务读一行数据   允许</li><li>排他锁 (X Lock) 允许事务删除或更新一行数据</li></ul><h4 id="意向锁"><a href="#意向锁" class="headerlink" title="意向锁"></a>意向锁</h4><p>innodb支持多粒度锁定，导致允许事务执行过程中行锁和表锁同时存在。为了支持再不同粒度加锁，诞生了意向锁（intention lock），其不会阻塞除全表扫以外的任何请求。</p><ul><li>意向共享锁（IS Lock）,事务想要获得一张表<strong>某几行</strong>的共享锁</li><li>意向排他锁（IX Lock），事务想要获得一张表中<strong>某几行</strong>的排他锁</li></ul><table><thead><tr><th></th><th>IS</th><th>IX</th><th>S</th><th>X</th></tr></thead><tbody><tr><td>IS</td><td>兼容</td><td>兼容</td><td>兼容</td><td>兼容</td></tr><tr><td>IX</td><td>兼容</td><td>兼容</td><td>不兼容</td><td>不兼容</td></tr><tr><td>S</td><td>兼容</td><td>不兼容</td><td>兼容</td><td>不兼容</td></tr><tr><td>X</td><td>不兼容</td><td>不兼容</td><td>不兼容</td><td>不兼容</td></tr></tbody></table><ul><li><p>锁相关表</p><ul><li>select * from information_schema.INNODB_TRX  查看事务的相关信息</li><li>select * from Performance_Schema.data_locks  查看锁相关信息（8以前 information_schema.INNODB_LOCKS） 其中一列lock_data事务锁定的记录的主键值，表锁为null，但是这个值行锁是也并不可信（范围值只锁第一行主键，锁住的页从缓冲池中被刷出，则也会显示null）</li><li>select * from Performance_Schema.data_lock_waits  查看当前等待的事务以及对应的锁（8以前 information_schema.INNODB_LOCK_WAITS）</li></ul></li><li><p>一致性非锁定读</p><p>指innodb通过多版本控制的方法来读取当前执行时间数据库中行的数据。如果读取的行正在执行delete和update操作，不会去等待锁的释放，而是读取undo中该行**<em>上一个版本(事务隔离级别为REPEATALBE REDA(mysql 默认)如果是READ COMMITTED 则不是上一个版本，而是数据最初版本)**</em>的快照数据。（一行数据可能不只一个快照数据，称之为多版本并发控制Multi Version Concurrency Control ，MVCC）</p></li><li><p>一致性锁定读</p><p> 这俩个select 锁定语句必须在事务中进行，所以一定要加上begin，start transaction或者set autocommit=0</p><ul><li>select_stamt for update    末尾加for update 显示的申明给该行加上x锁（不允许其他事务加锁，但是可以读，因为可以一致性非锁定读，读别的快照数据）</li><li>select_stamt lock in share mode  末尾加，显示的申明给该行加上s锁</li></ul></li><li><p>自增长与锁</p><table><thead><tr><th>插入类型</th><th>说明</th></tr></thead><tbody><tr><td>insert-like</td><td>指所有的插入语句如insert、insert …select、repalce、load data等</td></tr><tr><td>simple inserts</td><td>插入时确定了插入的行数如insert</td></tr><tr><td>bulk inserts</td><td>插入时不能确定插入行数 如 insert …select ,replace…select</td></tr><tr><td>mixed-mode inserts</td><td>一部分数据是自增长的一部分数据是确定的，如insert 心痛（‘5’，col）</td></tr></tbody></table></li></ul><table><thead><tr><th>innodb_autoinc_lock_mode</th><th>说明</th></tr></thead><tbody><tr><td>0</td><td>只采用表锁AUTO-INC-LOCKING方式实现自增长。</td></tr><tr><td>1</td><td>simple inserts采用互斥量的方式，bulk insert采用表锁。</td></tr><tr><td>2</td><td>只采用互斥量的方式</td></tr></tbody></table><ul><li><p>外键和锁</p><p>为了避免父表数据被更改或者删除，而字表插入数据，之后数据不一致。对字表数据插入时，查询父表的操作不采用一致性非锁定读的方式。</p></li></ul><h4 id="锁定算法"><a href="#锁定算法" class="headerlink" title="锁定算法"></a>锁定算法</h4><ul><li><p>Record Lock 记录锁 单个行记录上的锁</p></li><li><p>Gap Lock 间隙锁，锁定一个范围，但不包含记录本身</p></li><li><p>Next-Key Lock 临键锁：Gap Lock+Record Lock 锁定一个范围，并且锁定记录本身</p><ul><li>Next-Key Locking    左开右闭   （10,100] (<strong>主流</strong>)</li><li>previous-key locking    左闭右开  [10,100)</li></ul></li><li><p>对于唯一索引的锁定，next-key lock会降级成record lock，多列索引只用一个也不会降级。而普通索引则会加上next-key lock，同时给下一个辅助索引范围加上gap lock。**<em>没有索引的列或者索引失效，则进行表锁**</em></p><ul><li>比如 select * from tbl where b=3 for update  数据（b：1,3,6,8）俩列，a为主键，b有辅助索引</li><li>这时给（1,3] 加next-key lock 给（3，6）加gap lock</li></ul></li><li><p>俩种方式关闭</p><ul><li>事务隔离级别设置为READ Committed</li><li>将参数innodb_locks_unsafe_for_binlog 设置为1</li></ul></li><li><p>Phantom Problem指在同一事务下，连续执行俩次同样的sql语句可能导致不同的结果，第二次的sql语句可能会返回之前不存在的行。可以用上面的间隙锁进行避免</p></li></ul><h4 id="锁问题"><a href="#锁问题" class="headerlink" title="锁问题"></a>锁问题</h4><ul><li>脏读  不同事务下，当前事务可以读到另外事务未提交的数据。事务隔离级别是 read uncommitted时才会发生。</li><li>不可重复读    指在一个事务内多次读取同一个数据集合，在这个事务还没结束时，另一个事务进行DML操作，导致第一个事务第二次读数据可能不一样。（脏读读的是未提交的数据，不可重复读读的是提交了的别的事务的值） 事务级别在reda committed以下发生（mysql通过上面的next-key lock算法避免了这样的情况，所以mysql默认的隔离级别是 read repeatable）</li><li>幻读   类似于不可重复读，但是特指插入删除数据，而不可重复读特指修改数据。没有间隙锁前，只对数据加了行锁所以导致可能发生幻读，现在mysql引入间隙锁了，就不会发生了。</li><li>丢失更新   主要是应用层面的，应用a和应用b都已经查出来数据为100，应用a通过事务a提交更新为50，应用b通过事务b更新为90，则最后为90，理论应该为40.解决方式，在其上面用for update加排他锁</li></ul><h4 id="阻塞"><a href="#阻塞" class="headerlink" title="阻塞"></a>阻塞</h4><p>一个事务中的锁需要等待另一个事务中的锁释放它所占用的资源。</p><ul><li>参数  innodb_lock_wait_timeout 默认50秒  阻塞等待时间 ，动态，可以在mysql运行时调整<ul><li>set @@innodb_lock_wait_timeout=60;</li></ul></li><li>参数  innodb_rollback_on_timeout  设定是否在等待超时时对进行中的事务进行回滚操作（默认off，不回滚），静态，不可以在mysql运行时调整<ul><li>set @@innodb_rollback_on_timeout=on;</li></ul></li></ul><h4 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h4><p>指俩个或俩个以上的事务再执行过程中，因争夺锁资源而造成的一种互相等待的现象。</p><ul><li><p>回滚，将任何等待的事务都直接回滚重新执行</p></li><li><p>超时，设置等待阈值，如上面的innodb_lock_wait_timeout</p></li><li><p>wait-for graph（等待图），采用深度优先的算法主动检测死锁，根据保存的信息生成图，如果图中存在回路，则存在死锁，选择undo量最小的事务进行回滚。需要数据库保存以下俩种信息</p><ul><li>锁的信息链表    就是哪些事务要给该行记录增加锁的列表</li><li>事务等待链表   就是按顺序加入的事务列表</li></ul></li><li><p>锁升级  sql server存储锁按行来时，存储后所占资源内存超过激活内存的40%或者一个对象上持有的锁数量超过阈值时（5000默认）,将行锁向上审计为粗颗粒度的页锁、表锁等。 而mysql不存在这个问题，因为mysql是根据页加锁，一般资源开销不会太大。</p></li></ul><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>是数据库区别于文件系统的重要特性之一。事务会把数据库从一种一致状态转换为另一种一致状态。在数据库提交工作时，可以确保要么所有修改都已经保存了，要么所有修改都不保存。</p><p>innodb存储引擎中事务完全符合ACID的特性，（也就是说因为某些原因有不符合的比如NDB Cluster不满足D）</p><ul><li>原子性 （atomicity）事务是不可分割的工作单位，要么成功要么不成功</li><li>一致性（consistency）指事务将数据库从一种状态转变为下一种一致的状态。数据库的层面特指的是一致性状态，即在事务前后数据库的完整性约束没有被破坏，例如对于姓名加了个唯一约束，一个事务对姓名进行了修改，但是事务提交或回滚，发现姓名出现重复，则数据库会撤销事务，返回最初状态。**<em>（在业务端则通常认为执行前后，数据保持一致才是一致性，例如转账者和收款人的总额应该保持不变）**</em></li><li>隔离性（isolation）要求每个读写事务的对象对其他事务的操作对象能相互分离，即该事务提交前对其他事务都不可见，通常用锁来实现</li><li>持久性（durability）事务一旦提交，其结果就是永久性的。但是事务的持久性针对的是系统的<strong>高可靠性</strong>，数据库本身如RAID卡损坏等本身故障，应该利用其它系统共同配合进行高可用性的实现</li></ul><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ul><li>扁平事务（Flat Transactions）事务类型中最简单也是使用最频繁的的一种，从事务begin到commit/rollback 要么都执行要么都不执行，不存在回滚部分的能力。</li><li>带有保存点的扁平事务（Flat Transactions with Savepoints）（<strong>事务+暂存</strong>）在扁平事务的基础上添加保存点（通过savepoint my2申明记录当前状态，rollback to SAVEPOINT my 则可以回退到那里，可以记录多个保存点），记录事务执行过程中的一个处理状态，以便当之后发生错误时，事务能回到保存点当时的状态。</li><li>链事务（Chained Transacations）（<strong>事务+链表</strong>）保存点模式的一种变种，在提交一个事务时，释放不需要的数据对象，将必要的处理上下文隐式地传给下一个要开始的事务，将提交事务和开启下一个事务操作合并为了一个原子操作。（将一个大的事务拆成各个小的事务，然后链式结构构建成链事务）区别于保存点模式，其只针对当前事务进行回滚（将链式事务当成一个大事务来看，就是只能恢复到最近的一个保存点）</li><li>嵌套事务（Nested Transacations）（innodb不支持，可以通过保存点事务模拟串行的嵌套事务，但是并行的则无能为力）（<strong>事务+树</strong>）是一个层次框架，由一个顶层事务控制各个层次事务。顶层事务嵌套下的事务称为子事务。<ul><li>子事务可以再嵌套事务也可以就是扁平事务</li><li>事务的前驱称为父事务，下一层称为子事务</li><li>子事务可以提交或者回滚，但是他的操作不会马上生效，除非父事务已经提交。</li><li>树中的任意一事务回滚，会引起它的所有子事务一同回滚，所以子事务不具有D的特性。</li><li>父事务具有的锁可以向子事务传递锁。子事务需要父事务不具有的锁，则需要通过反向继承，让父事务持有之后再传递过来</li></ul></li><li>分布式事务（Distributed Transacations）通常是一个分布式环境下运行的扁平事务。</li></ul><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><ul><li><p>redo</p><ul><li><p>重做日志用来实现事务的原子性和持久性，其包括俩部分：一是内存中的重做日志缓冲（redo log buffer），二是重做日志文件（redo log file）其通过Force Log at Commit机制实现事务持久性，即事务提交时，必须先将该事务的所有日志写入到重做日志文件进行持久化，待事务的commit操作完成才算完成。（fsync操作：同步内存中所有已修改的文件数据到储存设备。这里就是将重做日志缓存先写入重做日志文件，再写入磁盘）</p><p>参数innodb_flush_log_at+trx_commit用来控制重做日志刷新磁盘的策略</p><ul><li>0 事务提交时不进行写入重做日志操作，这个操作仅再maste thread中完成。master thread中每1秒回进行一次重做日志文件的fsync操作</li><li>1 默认值 每次提交执行一次</li><li>2 事务提交先将重做日志缓存写入重做日志文件的文件缓存中，不进行fsync操作</li></ul></li><li><p>log block  日志块，重做日志文件和日志缓存以512个字节进行存储，即以块的方式。因为日志块的大小和磁盘扇区大小一样，都是512字节，所以可以保证写入的原子性，不需要doublewrite技术，其写入redo log file虽然都是最后部分进行写入，但是不是顺序写入</p></li><li><p>log group 重做日志组  逻辑概念，实际只有一个，由多个重做日志文件组成。</p></li><li><p>重做日志格式：redo_log_type 重做日志的类型；space 表空间的id；page_no 页的偏移量</p></li><li><p>LSN   Log Sequence Number 代表日志序列号</p></li><li><p>恢复   重做日志是物理日志，记录物理修改才做，比如 insert into t select 1,2   其记录的是page(2,3),offset 32 ,value 1,2  可以很快进行恢复</p></li></ul></li><li><p>undo</p><ul><li><p>存储在数据库内部的一个特殊段（segment）中，称为undo段，位于共享表空间内，用于数据库事务的回滚操作，其不是将数据库物理的恢复到某一个状态，而是对之前执行的DML语句进行反向操作。除了回滚，其另一个功能是实现innodb的MVCC(某行记录被事务锁定，通过undo获得之前的行版本信息，实现非锁定读)。同时，undo log的产生伴随着redo log ，因为undo log也需要持久化</p></li><li><p>undo页可以复用。当事务提交时，首先将undo log放入链表，判断undo页的使用空间是否小于3/4，若是则表示可以复用，将记录放在其后面。因此，执行purge操作时，需要涉及到磁盘的离散读操作了。</p></li><li><p><strong>undo log</strong>格式</p><ul><li>insert undo log  因为insert操作的记录，只对事务本身可见，对其他事务不可见，所以undo log提交后直接删除</li><li>update undo log  因为delete和update操作产生的undo log，因为mvcc的需要。事务提交后放入undo log链表，等待purge操作删除</li></ul></li><li><p>purge  delete和update操作可能并不直接删除原有数据，而是在主键列上的记录delete flag设为1，（update也是这么处理原逻辑），而并没有删除，任然在b+树上，有purge最终真正完成删除操作。因为要支持MVCC,不能再事务提交时立即进行处理。</p></li><li><p>group commit   一次fsync可以刷新确保多个事务日志写入文件。</p></li></ul></li></ul><ul><li><p>显示事务控制语句</p><ul><li>显示的开启一个事务：start  transaction |  begin    显示的开启一个事务（在存储过程中，begin会被识别成begin … end所以只能用前者）</li><li>commit | commit work   提交事务 （completion_type值为0时，俩者相同，为1时，后者等同于commit and chain 表示是链式事务，马上自动开启一个相同隔离级别的事务，为2时，commit work等同于commit and release，在事务提交后会自动断开与服务器的连接）</li><li>rollback | rollback work 回滚事务</li><li>savepoint    name  在事务中创建一个保存点</li><li>release savepoint   name  删除一个事务的保存点</li><li>rollback to  savepoint_name  将事务回滚到标记点（只是回滚到保存点，但是不是真正的回滚了事务，还需要显式的执行commit或rollback命令）</li><li>set transaction 设置事务的隔离级别</li></ul></li><li><p>隐式提交的sql语句</p><ul><li>DDL语句：ALTER DATABASE…UPGRADE DATADIRECTORY NAME，ALTER EVENT，ALTERPROCEDURE，ALTER TABLE，ALTER VIEW，CREATEDATABASE，CREATE EVENT，CREATE INDEX，CREATE PROCEDURE，CREATE TABLE，CREATETRIGGER，CREATE VIEW，DROP DATABASE，DROPEVENT，DROP INDEX，DROP PROCEDURE，DROPTABLE，DROP TRIGGER，DROP VIEW，RENAMETABLE，TRUNCATE TABLE。</li><li>用来隐式地修改MySQL架构的操作：CREATE USER、DROP USER、GRANT、RENAME USER、REVOKE、SETPASSWORD。</li><li>管理语句：ANALYZE TABLE、CACHE INDEX、CHECKTABLE、LOAD INDEX INTO CACHE、OPTIMIZETABLE、REPAIR TABLE。</li></ul></li><li><p>对于事务操作的统计</p><p>显示控制事务的提交和回滚，可以通过com_commit和com_rollback进行统计</p></li></ul><h4 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h4><ul><li><p>Read UnCommitted</p></li><li><p>Read Committed</p></li><li><p>Repeatable Read</p></li><li><p>Serializable(再innodb中因为间隙锁的存在，主要用于分布式事务)</p><p>查看当前会话的事务隔离级别:select @@tx_isolation</p></li></ul><h4 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h4><ul><li><p>XA事务：由一个或多个资源管理器、一个事务管理器以及一个应用程序组成</p><ul><li>资源管理器：提供访问事务资源的方法。通常一个数据库就是一个资源管理器</li><li>事务管理器：协调参与全局事务中的各个事务，需要和参与全局事务的所有资源管理器进行通信</li><li>应用程序：定义事务的边界，指定全局事务中的操作</li></ul></li><li><p>分布式事务使用俩段式提交（two-phase commit）</p><ol><li>所有参与全局事务的节点都开始准备，告诉事务管理器他们准备好提交了</li><li>事务管理器告诉资源管理器执行提交或回滚</li><li>任何一个节点显示不能提交，则所有节点被告知回滚</li></ol></li><li><p>内部XA事务</p><ul><li>binlog和innodb存储引擎之间。如果二进制日志写入而redo log没有写入。则slave可能接受到master的二进制日志执行，而master本身没有，造成主从不一致</li><li>MySQL数据库在binlog与InnoDB存储引擎之间采用XA事务。当事务提交时，InnoDB存储引擎会先做一个PREPARE操作，将事务的xid写入，接着进行二进制日志的写入，如果在InnoDB存储引擎提交前，MySQL数据库宕机了，那么MySQL数据库在重启后会先检查准备的UXID事务是否已经提交，若没有，则在存储引擎层再进行一次提交操作。</li></ul></li></ul><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><h4 id="备份的分类"><a href="#备份的分类" class="headerlink" title="备份的分类"></a>备份的分类</h4><ol><li>按照备份方法不同分类<ul><li>热备 Hot BackUp 数据库运行中直接备份。官方称之为Online Backup 在线备份</li><li>冷备 Cold BackUp 数据库停止的情况下备份，一般只需要复制相关数据库物理文件即可。官方称其为Offline Backup 离线备份（只需要备份MySQL数据库的frm文件，共享表空间文件，独立表空间文件（*.ibd），重做日志文件。另外建议定期备份MySQL数据库的配置文件my.cnf，这样有利于恢复的操作。）</li><li>温备 Warm BackUp 在数据库运行中进行，但是会对当前数据库的操作有影响，如加一个全局读锁一保证备份数据额一致性</li></ul></li><li>按照备份后文件内容分类<ul><li>逻辑备份 指备份出的文件可读。内容由一条条sql语句，或者表实际数据组成。优点是可以观察导出文件的内容，适用于数据库迁移升级工作。缺点是恢复所需要的时间往往很长</li><li>裸文件备份 指复制数据库的物理文件，既可以是在数据库运行中的复制，也可以是在数据库停止运行时直接的数据文件复制。这类备份，往往恢复时间较逻辑备份短很多</li></ul></li><li>按照备份数据库的内容来分<ul><li>完全备份 指对数据库进行一个完整的备份。</li><li>增量备份 在上次完全备份的基础上，对更改的数据进行备份。</li><li>日志备份 指Mysql数据库二进制日志的备份，通过对一个完全备份进行二进制日志的重做来完成数据库的point-in-time的恢复工作。MySQL数据库复制（replication）的原理就是异步实时地将二进制日志重做传送并应用到从（slave/standby）数据库。</li></ul></li></ol><ul><li><p>快照备份   主要是利用文件的快照，备份数据库文件。</p></li><li><p>复制 （replication） 其实就是一个完全备份加上二进制日志备份的还原，主要用来建立高可用架构的主从复制（复制不是完全实时地进行同步，而是异步实时。这中间存在主从服务器之间的执行延时）</p><ul><li>主服务器  把数据更改记录到二进制日志中</li><li>从服务器  把主服务器的二进制日志复制到自己的中继日志中</li><li>从服务器重做中继日志中的日志，把更改应用到自己的数据库上，以达到数据的最终一致性。</li></ul></li><li><p>复制的主要功能</p><ul><li>数据分布：由于MySQL数据库提供的复制并不需要很大的带宽要求，因此可以在不同的数据中心之间实现数据的复制。</li><li>读取的负载平衡：通过建立多个从服务器，可将读取平均地分布到这些从服务器中，并且减少了主服务器的压力。一般通过DNS的Round-Robin和Linux的LVS功能都可以实现负载平衡。</li><li>数据库备份：复制对备份很有帮助，但是从服务器不是备份，不能完全代替备份。</li><li>高可用性和故障转移:通过复制建立的从服务器有助于故障转移，减少故障的停机时间和恢复时间。</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h2&gt;&lt;p&gt;Mysql的深入点了解，主要建立在《MySQL技术内幕：Innodb存储引擎（第二版）》的基础上，记录的知识点和一些自己验证后发现的自己的个人感觉书里表述不清的地方，当然，笔者是java后端的开发，一些比较偏DBA的地方有进行略过。&lt;/p&gt;</summary>
    
    
    
    
    <category term="mysql" scheme="https://zhhw137.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>hexo使用规则</title>
    <link href="https://zhhw137.github.io/2020/08/21/hexo%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E8%A7%84%E5%88%99/"/>
    <id>https://zhhw137.github.io/2020/08/21/hexo%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E8%A7%84%E5%88%99/</id>
    <published>2020-08-20T16:00:00.000Z</published>
    <updated>2020-08-22T05:35:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo使用说明。</p><blockquote><p>更多说明请参考：<a href="https://hexo.io/zh-cn/docs">https://hexo.io/zh-cn/docs</a></p></blockquote><a id="more"></a><h2 id="开启本地服务器"><a href="#开启本地服务器" class="headerlink" title="开启本地服务器"></a>开启本地服务器</h2><p>如果想在本地预览效果，在文件根目录使用<code>git</code>指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo s #默认端口4000</span><br><span class="line">hexo s -p 8080 #修改端口号为8080(比如端口被占用的时候)</span><br></pre></td></tr></table></figure><p>访问：<a href="http://localhost:4000/">http://localhost:4000/</a>。</p><p>关闭服务器：<code>Ctrl + C</code>.</p><h2 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h2><p>如果你的文段没有正常显示，说明没有解析为静态文件（<code>html</code>），这个时候需要手动解析：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo generate #解析静态文件</span><br><span class="line">hexo generate --deploy #解析并自动部署</span><br><span class="line">hexo g --d #简写形式1</span><br><span class="line">hexo d --g #简写形式2</span><br></pre></td></tr></table></figure><h2 id="一件部署"><a href="#一件部署" class="headerlink" title="一件部署"></a>一件部署</h2><p>在执行部署(提交到<code>github</code>或其他站点)指令前，需要设置根目录配置文件<code>_config.yml</code>：找到<code>deploy</code>字段，修改：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/fongzhizhi/fongzhizhi.github.io</span> <span class="comment">#改为你的github仓库地址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span> <span class="comment">#该仓库的默认分支</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">hexo一键部署</span> <span class="comment">#提交信息</span></span><br></pre></td></tr></table></figure><p>然后执行一件部署指令：<strong>可以选择一下指令之一</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo deploy #清除一些缓存并部署到远程</span><br><span class="line">hexo g --d #解析并部署</span><br></pre></td></tr></table></figure><p>然后过几秒钟，刷新你的站点就能看到效果啦！</p><h2 id="其他说明"><a href="#其他说明" class="headerlink" title="其他说明"></a>其他说明</h2><p>文章都放在<code>source\</code>目录的其他下（根据不同类型放置）。写完记得静态解析，然后再部署。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Hexo使用说明。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;更多说明请参考：&lt;a href=&quot;https://hexo.io/zh-cn/docs&quot;&gt;https://hexo.io/zh-cn/docs&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="Hexo" scheme="https://zhhw137.github.io/tags/Hexo/"/>
    
    <category term="说明" scheme="https://zhhw137.github.io/tags/%E8%AF%B4%E6%98%8E/"/>
    
  </entry>
  
</feed>
